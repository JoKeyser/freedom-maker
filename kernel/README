To compile your own kernel, you can use config-3.0.0-1bauer4-kirkwood as basis.
Follow the following steps on the DreamPlug to compile a new kernel:

  1. Get the kernel source and other needed packages.
    # apt-get install linux-source-3.0.0 kernel-package lzma
  2. Unpack it somewhere.
    # cd /var/tmp; tar xfj /usr/src/linux-source-3.0.0.tar.bz2
  3. Apply the patches found in http://people.debian.org/~zumbi/dreamplug/patches/
  4. Copy the config and compile.
    # cd linux-source-3.0.0
    # cp /path/to/config-3.0.0-1bauer4-kirkwood .config
    # make-kpkg clean
    # make-kpkg --append-to-version -1bauer4-kirkwood --revision=3.0.0-3bauer4 --initrd --cross_compile=- kernel_image kernel_headers
  5. Install the packages.
    # dpkg -i ../linux-{image,headers}-3.0.0-1bauer2-kirkwood_3.0.0-3bauer2_armel.deb

These packages should get a kernel up and running into DreamPlug device.
The compilation process takes 6 hours on the DreamPlug. You will need
approximately 1 GB of free space for the build (including the size of the
unpacked kernel source).

WARNING: Packages are currently untested.

After kernel is installed on device, hooks should be calling:
  flash-kernel 3.0.0-1bauer4-kirkwood

After that you should get a uImage and uInitrd files under /boot.

This is work in progress, so stay tunned. Final goal is to enable
DreamPlug device in Debian, but currently it needs to get into mainline
Linus' kernel tree.

Bootloader
GlobalScale (or Marvell) code is reusing GuruPlug machine identification,
while mainline kernel assigns another machine identification for DreamPlug
3550. That might cause problems regarding the bootloader in use, if it is 
the mainline one or the GlobalScale provided one, which expect different
machine ID.

Linus' kernel
Jason Cooper is enabling device tree support, in the meanwhile,
Arnaud Patard is working out a patch to reuse GuruPlug machine definition.

After this work is completed upstream, enabling Debian support is trivial,
as enabling kirkwood kernel, debian-installer and U-Boot.

Nitpicks
Libertas UAP driver is hard to get into mainline kernel, so either someone needs
to attempt mainlining it or it needs to be built as separated module out of kernel
tree.

Hector Oron
Fri Aug 26 00:02:39 UTC 2011
