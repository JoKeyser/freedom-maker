diff --git a/bin/vmdebootstrap b/bin/vmdebootstrap
index 0a08eb9..a7f4241 100755
--- a/bin/vmdebootstrap
+++ b/bin/vmdebootstrap
@@ -190,6 +190,22 @@ class VmDebootstrap(cliapp.Application):  # pylint: disable=too-many-public-meth
             runcmd(['mkswap', filesystem.devices['swapdev']])
         filesystem.mkfs(rootdev, fstype=roottype)
         rootdir = self.mount(rootdev)
+        if 'btrfs' == self.settings['roottype']:
+            # Put root in a subvolume, to ease snapshots and volume management
+            base.message("Creating subvolume for root file system: @")
+            self.runcmd(['btrfs', 'subvolume', 'create', "%s/@" % rootdir])
+            # Make sure the subvolume mount point show up in
+            # /proc/mounts for grub-update to figure out the
+            # device for the root file system.
+            newrootdir = "%s/build" % rootdir
+            os.mkdir(newrootdir)
+            self.mount(rootdev, newrootdir, ['-o','subvol=@'])
+
+            # Make the btrfs root file system available in the chroot.
+            os.mkdir("%s/btrfs" % newrootdir)
+            self.mount(rootdev, "%s/btrfs" % newrootdir)
+
+            rootdir = newrootdir
         filesystem.devices['rootdir'] = rootdir
         if self.settings['use-uefi']:
             self.bootdir = uefi.prepare_esp(rootdir, bootdev)
@@ -299,14 +315,14 @@ class VmDebootstrap(cliapp.Application):  # pylint: disable=too-many-public-meth
         logging.debug('mkdir %s', dirname)
         return dirname
 
-    def mount(self, device, path=None):
+    def mount(self, device, path=None, opts=None):
         base = self.handlers[Base.name]
         if not path:
             mount_point = self.mkdtemp()
         else:
             mount_point = path
         base.message('Mounting %s on %s' % (device, mount_point))
-        runcmd(['mount', device, mount_point])
+        runcmd(['mount'] + (opts or []) + [device, mount_point])
         self.mount_points.append(mount_point)
         logging.debug('mounted %s on %s', device, mount_point)
         return mount_point
@@ -387,6 +403,8 @@ class VmDebootstrap(cliapp.Application):  # pylint: disable=too-many-public-meth
         include.extend(uefi.efi_packages())
         include.extend(grub.grub_packages())
         include.extend(distro.kernel_package())
+        if 'btrfs' == self.settings['roottype']:
+            include.append('btrfs-tools')
         return list(set(include))
 
     def _debootstrap_second_stage(self, rootdir):
diff --git a/vmdebootstrap/extlinux.py b/vmdebootstrap/extlinux.py
index 5698f6c..04fc8a5 100644
--- a/vmdebootstrap/extlinux.py
+++ b/vmdebootstrap/extlinux.py
@@ -74,13 +74,14 @@ timeout 1
 
 label linux
 kernel %(kernel)s
-append initrd=%(initrd)s root=UUID=%(uuid)s ro %(kserial)s
+append initrd=%(initrd)s root=UUID=%(uuid)s ro %(kserial)s %(rootflags)s
 %(extserial)s
 ''' % {
             'kernel': kernel_image,  # pylint: disable=bad-continuation
             'initrd': initrd_image,  # pylint: disable=bad-continuation
             'uuid': uuid,  # pylint: disable=bad-continuation
             'kserial': kserial,  # pylint: disable=bad-continuation
+            'rootflags': 'rootfsflags=subvol=@' if 'btrfs' == self.settings['roottype'] else '',  # pylint: disable=bad-continuation
             'extserial': extserial,  # pylint: disable=bad-continuation
         }  # pylint: disable=bad-continuation
         logging.debug("extlinux config:\n%s", msg)
diff --git a/vmdebootstrap/filesystem.py b/vmdebootstrap/filesystem.py
index 106fa56..aaa9438 100644
--- a/vmdebootstrap/filesystem.py
+++ b/vmdebootstrap/filesystem.py
@@ -53,6 +53,7 @@ class Filesystem(Base):
     def define_settings(self, settings):
         self.settings = settings
         self.devices['roottype'] = self.settings['roottype']
+        self.devices['boottype'] = self.settings['boottype']
 
     def chown(self):
         if not self.settings['owner']:
@@ -160,7 +161,11 @@ class Filesystem(Base):
         fstab = os.path.join(str(rootdir), 'etc', 'fstab')
         with open(fstab, 'w') as fstab:
             fstab.write('proc /proc proc defaults 0 0\n')
-            fstab.write('%s / %s errors=remount-ro 0 1\n' % (rootdevstr, roottype))
+            if self.settings['roottype'] == 'btrfs':
+                fstab.write('%s / %s subvol=@ 0 1\n' % (rootdevstr, roottype))
+                fstab.write('%s /btrfs %s defaults 1\n' % (rootdevstr, roottype))
+            else:
+                fstab.write('%s / %s errors=remount-ro 0 1\n' % (rootdevstr, roottype))
             if bootdevstr:
                 fstab.write('%s /boot %s errors=remount-ro 0 2\n' % (bootdevstr, boottype))
                 if self.settings['swap'] > 0:
