Freedom-Maker  -  Bdale's building tools for the FreedomBox project

Welcome to the FreedomBox!  This project is the central hub of the FreedomBox
project, it builds and installs the file-system image that turns any computer
into a FreedomBox.

There are a couple ways to use this system:

1. If you just want to use a FreedomBox and don't care about changing how it
   works or mucking about in its insides (if you're like most people), you
   should get a pre-built image from someone and copy it to an SD card or USB
   drive.  If you don't have a JTAG or don't know what one is, make sure to ask
   for the SD card image.

2. If you want to change and build on it, you can use:

   A. A USB stick.  This requires a JTAG, but doesn't require opening up the
      DreamPlug), or,

   B. A microSD card and adapter.  You can use the one from inside the
      DreamPlug.  You won't need a JTAG, but you will need to open the DreamPlug
      and void the warranty.

***
*** Warning!  There are no "training wheels" here .. read the scripts and
***           understand what they're going to do before you run them...
***

# To Use It

You'll need to copy the image to the memory card or USB stick:

1. Figure out which device your card actually is.  

   A. Unplug your card.
   
   B. Run "df" to show you the list of devices your computer actually knows
      about.
      
   C. Plug your card in.
   
   D. Run "df" again, your computer should know about a new device or two: your
      memory card.  It's probably "/dev/sd(someletter)".  It *won't be*
      /dev/sda.

2. Decompress the image:

    $ tar -xjvf freedombox-unstable_*.tar.bz2

3. Copy the image to your card.  Whatever you do, make sure you don't copy it to
   /dev/sda.  That'll break your system.

    # dd bs=1M if=freedombox-unstable_*.img of=/dev/sd(thesameletter)

Now, what you need to do depends on whether you're using the microSD card or USB
stick method:

- USB drive: You'll hook the JTAG up to the DreamPlug before booting and use the JTAG
  to control the boot process, so we can boot from the USB drive.
  
- microSD card: You'll put the microSD card into the DreamPlug's internal
  microSD card slot and boot the DreamPlug.  It'll restart once to finish the
  install process, then it's ready to use.

## Running from a microSD Card

When DD has finished, take the microSD card out of your computer and plug it
into your DreamPlug.  If you have a JTAG, you can watch it boot.  You'll see it
restart once during the boot process.  If you don't have a JTAG, wait a while (5
minutes or less) and it'll be available over SSH (port 22).  You might need to
use nmap to find it:

    $ nmap -p 22 --open -sV 192.168.0.0/24
    
    ...
    Interesting ports on 192.168.0.13:
    PORT   STATE SERVICE VERSION
    22/tcp open  ssh     OpenSSH 6.0p1 Debian 2 (protocol 2.0)
    Service Info: OS: Linux
    ...

Once you've found it, SSH into the box:
    
    $ ssh root@192.168.0.13

## Running from a USB Stick

Move the USB stick to the DreamPlug, obtain a serial console, and hit reset.  A
good way to access the serial console (actually USB serial emulation provided by
the optional JTAG dongle), is to use 'screen', like so:

	screen /dev/ttyUSB0 115200

Interrupt the boot by pressing a key during the autoboot countdown, and type the
following to boot from the USB stick:

	setenv bootcmd '${x_bootcmd_usb}; ${x_bootcmd_kernel}; ${x_bootcmd_initrd}; setenv bootargs ${x_bootargs} ${x_bootargs_root}; bootm 0x6400000 0x6900000;'
	setenv x_bootcmd_kernel fatload usb 2 0x6400000 uImage 
	setenv x_bootcmd_initrd fatload usb 2 0x6900000 uInitrd
	setenv x_bootargs_root root=/dev/sdc2 rootdelay=10
	boot

The system should boot to a login prompt, using only the bits on the stick.

The default root password is 'freedom'.  The normal user is "fbx" and the
password is "frdm".

- - - - -

To set things up to boot from the internal microSD card, once you're logged into
the system booted from root on USB stick you can use:

	/sbin/copy2dream

Note that if you don't have a reasonable system date and time set in the
DreamPlug before running this command, you may see a long stream of warnings
from tar about timestamps being in the future.  It is safe to ignore these.

On reboot, you may want to interrupt the boot and type the following to ensure
you boot from the internal microSD by default.  This bootcmd line elides the
time-consuming attempts to boot grom gigE, which makes boot go much faster:

	setenv bootcmd '${x_bootcmd_usb}; ${x_bootcmd_kernel}; ${x_bootcmd_initrd}; setenv bootargs ${x_bootargs} ${x_bootargs_root}; bootm 0x6400000 0x6900000;'
	setenv x_bootcmd_kernel fatload usb 0 0x6400000 uImage 
	setenv x_bootcmd_initrd fatload usb 0 0x6900000 uInitrd
	setenv x_bootargs_root root=/dev/sda2 rootdelay=10
	saveenv
	reset

# To Understand It

Be aware that this is a *very* imcomplete solution for now, suitable only
for developers .. you will want to at least do things like create unique 
ssh host keys for your device!

Digging into the code should be fairly straightforward.  There are only six
files you need to be aware of:

- /Makefile: The makefile that describes and builds the system.
- /mk_dreamplug_rootfs: Builds the DreamPlug's root file-system.
- /bin/projects: The place for external projects to hook into and customize
  themselves before they're copied to the image.
- /bin/finalize: Finalizes and prepares the build for booting.
- /source: The root file system.
- /source/install.sh: Pre-boot configuration that needs to be run on the device
  itself (from within a chroot).

## Makefile

There are three major targets to be aware of:

- dreamstick: The default target.  This loads an image to a USB drive that can
  be used to install the FreedomBox without opening up your DreamPlug and
  voiding the warranty.  You'll need a JTAG, though.
- weekly-card: The target used to produce the weekly FreedomBox test release.
  This will copy the image to a card that can be popped directly into the
  microSD card slot in the DreamPlug.  The DreamPlug will boot happily without
  needing a JTAG.
- stamp-dreamplug-rootfs: The root file system itself.  It doesn't get installed
  anywhere (that's done by the other two targets), but is a good way to test
  whether the image will actually build, without waiting for all that pesky
  hardware I/O.

## mk_dreamplug_rootfs

Starts building the system by creating all the destination directories and
installing the base system.

## /bin/projects

Where projects that want to integrate into the FreedomBox should hook into.
Keep in mind, we aren't in a chroot at this point.  The only environment
variables you'll probably need are:

- user: The non-root user's name (uid = 1000).
- homedir: The non-root user's home-directory.

## /bin/finalize

Getting the system ready for boot, doing the things that don't need to be done
inside a chroot.  You probably don't need to change this.

## /source

The root file system on the DreamPlug.  Modify this, and you're modifying what
ends up on the FreedomBox.

## /source/install.sh

This is executed from a chroot during the build process to do configuration that
needs to be done on the device itself.  You shouldn't need to modify this.  If
you're installing a project that needs to change how the system configures
itself, you're probably doing something wrong.

# Questions

I don't know if I'm using flash-kernel correctly.  I doubt it.  I don't think it
can be run on an already booted system without rebooting immediately thereafter.

That would explain a few things.

Should it be run in the chroot instead?
